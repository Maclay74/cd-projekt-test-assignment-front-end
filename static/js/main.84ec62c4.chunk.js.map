{"version":3,"sources":["components/auth/style.module.scss","components/tweets-upload/style.module.scss","components/header/style.module.scss","components/tweets-table/style.module.scss","components/tweets-sorter/style.module.scss","components/header/twitter-logo.svg","pages/main.module.scss","store/user.js","store/index.js","services/api.js","containers/LogIn.js","components/auth/LogInForm.jsx","pages/auth/LogIn.jsx","pages/auth/Router.jsx","containers/TweetsTable.js","containers/UploadTweets.js","components/tweets-table/tweets-table.jsx","components/tweets-sorter/tweets-sorter.jsx","services/parse-cvs.js","components/tweets-upload/tweets-upload.jsx","pages/tweets/Table.jsx","pages/tweets/Router.jsx","containers/Header.js","components/header/header.jsx","pages/Router.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","types","initialState","token","isAuthorized","actions","signIn","dispatch","a","localStorage","setItem","type","signOut","removeItem","reducers","combineReducers","user","state","action","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","request","url","params","method","getState","axios","data","baseURL","process","headers","LogIn","props","initialValues","login","password","error","validationSchema","Yup","shape","required","onSubmit","bind","fields","form","this","setState","then","response","catch","field","errors","setFieldError","children","React","Component","defaultProps","connect","CredentialsHint","message","description","className","styles","LogInForm","container","Title","level","layout","Item","name","label","Password","showIcon","path","to","pathname","TweetsTable","page","pageSize","count","sort","tweets","isLoading","sortOptions","title","value","onPageChange","onPageSizeChange","onSortChange","afterUpdate","fetchTweets","map","tweet","key","id","mapTweetsFromApi","parseInt","UploadTweets","uploadTweets","truncateTable","console","warn","dataSource","columns","dataIndex","loading","pagination","total","current","showSizeChanger","pageSizeOptions","onChange","onShowSizeChange","size","TweetsSorter","disabled","style","width","placeholder","allowClear","option","Option","parseCsv","file","Promise","resolve","Papaparse","parse","worker","complete","TweetsUpload","config","accept","multiply","customRequest","rows","records","author_name","publish_date","moment","format","confirm","content","length","onOk","onSuccess","okText","onCancel","onError","transformFile","header","Group","href","target","icon","onClick","okType","Dragger","Table","showAdminPanel","Fragment","Header","propTypes","PropTypes","func","withRouter","history","useState","setCurrent","useEffect","pageName","location","match","e","src","TwitterLogoUrl","alt","logo","theme","mode","menu","selectedKeys","push","centered","init","setInit","useDispatch","getItem","Content","layoutContent","exact","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,uB,oBCA/DD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,OAAS,sBAAsB,MAAQ,uB,oBCA9FD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,KAAO,sB,oBCAzFD,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,2B,oBCD9BD,EAAOC,QAAU,IAA0B,0C,oBCC3CD,EAAOC,QAAU,CAAC,cAAgB,8B,qLCDrBC,EACA,eADAA,EAEC,gBAGRC,EAAe,CACjBC,MAAO,KACPC,cAAc,GAyBLC,EAAU,CACnBC,OAAQ,SAAAH,GAAK,8CAAI,WAAMI,GAAN,SAAAC,EAAA,sDACbC,aAAaC,QAAQ,QAASP,GAC9BI,EAAS,CACLI,KAAMV,EACNE,UAJS,2CAAJ,uDAQbS,QAAS,yDAAM,WAAML,GAAN,SAAAC,EAAA,4EAOXC,aAAaI,WAAW,SACxBN,EAAS,CACLI,KAAMV,IATC,2CAAN,wDCpCPa,EAAWC,0BAAgB,CAC7BC,KDIW,WAAmC,IAAlCC,EAAiC,uDAAzBf,EAAcgB,EAAW,uCAC7C,OAAQA,EAAOP,MACX,KAAKV,EACD,OAAO,eACAgB,EADP,CAEId,MAAOe,EAAOC,QACdf,cAAc,IAGtB,KAAKH,EACD,OAAO,eACAgB,EADP,CAEId,MAAO,KACPC,cAAc,IAGtB,QACI,OAAOa,MCRJG,EARDC,sBACVP,EAHiB,GAKjBQ,8BACIC,0BAAgBC,O,2HCXlBC,EAAU,SAACC,GAAsC,IAAjCC,EAAgC,uDAAvB,GAAIC,EAAmB,uDAAV,MAElCzB,EAAQiB,EAAMS,WAAWb,KAAKZ,aAAegB,EAAMS,WAAWb,KAAKb,MAAQ,KAEjF,OAAO2B,IAAM,CACTJ,MACAE,SACAD,OAAmB,QAAXC,EAAmBD,EAAS,KACpCI,KAAiB,SAAXH,EAAoBD,EAAQ,KAClCK,QAXSC,2BAYTC,QAAU/B,EAAQ,CAAC,cAAgB,UAAhB,OAA2BA,IAAW,MCP3DgC,E,YAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,cAAgB,CACjBC,MAAO,GACPC,SAAU,IAGd,EAAKtB,MAAQ,CACTuB,MAAO,MAGX,EAAKC,iBAAmBC,MAAaC,MAAM,CACvCL,MAAOI,IAAW,kBACbE,SAAS,qBACdL,SAAUG,IAAW,kBAChBE,SAAS,0BAGlB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAnBD,E,+GAsBJC,EAAQC,G,8EAEX1C,EAAW2C,KAAKb,MAAhB9B,OAER2C,KAAKC,SAAS,CACVV,MAAO,O,sBAQXf,EAAQ,eAAgBsB,EAAQ,QAC3BI,MAAK,SAAAC,GAAQ,OAAI9C,EAAO8C,EAASrB,KAAK5B,UACtCkD,OAAM,SAAAb,GAEH,GAAKA,EAAMY,SAAX,CAFY,IASQrB,EAAUS,EAAtBY,SAAYrB,KAEpB,IAAK,IAAMuB,KAASvB,EAAKwB,OAAQ,CAAC,IACtBf,EADqB,YACXT,EAAKwB,OAAOD,GADD,MAE7BN,EAAKQ,cAAcF,EAAOd,SAV1B,EAAKU,SAAS,CACVV,MAAO,uC,wIAgBvB,OAAOS,KAAKb,MAAMqB,SAAS,CACvBpB,cAAeY,KAAKZ,cACpBI,iBAAkBQ,KAAKR,iBACvBI,SAAUI,KAAKJ,SACfL,MAAOS,KAAKhC,MAAMuB,Y,GA/DVkB,IAAMC,WAoE1BxB,EAAMyB,aAAe,CACjBH,SAAU,cAOCI,kBAAQ,KAAMxD,EAAdwD,CAAuB1B,G,oIC7EhC2B,EAAkB,SAAC,GAAD,IAAExB,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACpB,uBACIwB,QAAQ,oCACRC,YAAa,sDAA2B,2BAAI1B,GAA/B,sBAA4D,2BAAIC,GAAhE,mBACb5B,KAAK,OACLsD,UAAWC,IAAO1B,SAyCX2B,EArCG,SAAC,GAAwD,IAAvD9B,EAAsD,EAAtDA,cAAeI,EAAuC,EAAvCA,iBAAkBI,EAAqB,EAArBA,SAAUL,EAAW,EAAXA,MAK3D,OACI,uBAAMyB,UAAWC,IAAOE,WAEpB,sBAAYC,MAAZ,CAAkBC,MAAO,GAAzB,UACA,kBAAC,IAAD,CACIjC,cAAeA,EACfI,iBAAkBA,EAClBI,SAAUA,IAEb,kBACG,uBAAM0B,OAAQ,YACV,sBAAMC,KAAN,CAAWC,KAAK,QAAQC,MAAO,QAAS9B,UAAQ,GAC5C,uBAAO6B,KAAK,WAGhB,sBAAMD,KAAN,CAAWC,KAAK,WAAWC,MAAO,WAAY9B,UAAQ,GAClD,sBAAO+B,SAAP,CAAgBF,KAAK,WAAW9D,KAAK,cAGzC,uCAEG6B,GAAS,uBAAQuB,QAASvB,EAAO7B,KAAK,QAAQiE,UAAQ,EAACX,UAAWC,IAAO1B,QAC5E,kBAAC,EAAD,CAAiBF,MAzBnB,QAyBiCC,SAxB9B,mBCLNJ,EARD,SAAAC,GACV,OACI,kBAAC,EAAD,MACK,SAAAA,GAAK,OAAI,kBAAC,EAAmBA,OCW3ByB,eAJS,SAAA5C,GAAK,MAAK,CAC9BD,KAAMC,EAAMD,QAGD6C,EAdA,SAAC,GAAc,IAAZ7C,EAAW,EAAXA,KAEd,OACI,kBAAC,IAAD,CAAO6D,KAAM,SACR7D,EAAKZ,cAAgB,kBAAC,IAAD,CAAU0E,GAAI,CAACC,SAAU,cAC7C/D,EAAKZ,cAAgB,kBAAC,EAAD,UC6FpB4E,E,YAjGX,WAAY5C,GAAQ,IAAD,8BACf,4CAAMA,KAEDnB,MAAQ,CACTgE,KAAM,EACNC,SAAU,GACVC,MAAO,KACPC,KAAM,KACNC,OAAQ,GACRC,WAAW,GAGf,EAAKC,YAAc,CACf,CAACC,MAAO,eAAgBC,MAAO,gBAC/B,CAACD,MAAO,QAASC,MAAO,UAG5B,EAAKC,aAAe,EAAKA,aAAa5C,KAAlB,gBACpB,EAAK6C,iBAAmB,EAAKA,iBAAiB7C,KAAtB,gBACxB,EAAK8C,aAAe,EAAKA,aAAa9C,KAAlB,gBACpB,EAAK+C,YAAc,EAAKA,YAAY/C,KAAjB,gBApBJ,E,iFAwBfG,KAAK6C,gB,kCAGG1C,GACRH,KAAKC,SAAS,CACV+B,KAAM,GACPhC,KAAK6C,e,mCAGCb,GACThC,KAAKC,SAAS,CACV+B,QACDhC,KAAK6C,e,uCAGKZ,GACbjC,KAAKC,SAAS,CACVgC,WACAD,KAAM,GACPhC,KAAK6C,e,uCAGKT,GACb,OAAOA,EAAOU,KAAI,SAAAC,GAAK,sBAChBA,EADgB,CAEnBC,IAAKD,EAAME,U,mCAINd,GACTnC,KAAKC,SAAS,CACV+B,KAAM,EACNG,QACDnC,KAAK6C,e,mKAIuB7C,KAAKhC,MAA7BgE,E,EAAAA,KAAMC,E,EAAAA,SAAUE,E,EAAAA,KAEvBnC,KAAKC,SAAS,CACVoC,WAAW,GADf,sBAEG,kCAAA9E,EAAA,sEAEwBiB,EAAQ,eAAgB,CAC3CwD,OAAMC,WAAUE,QACjB,OAJJ,OAEOhC,EAFP,SAMyBA,EAASrB,KAA1BsD,EANR,EAMQA,OAAQF,EANhB,EAMgBA,MAEf,EAAKjC,SAAS,CACVmC,OAAQ,EAAKc,iBAAiBd,GAC9BF,MAAOiB,SAASjB,GAChBG,WAAW,IAXhB,4C,qIAiBH,OAAOrC,KAAKb,MAAMqB,SAAX,eACAR,KAAKhC,MADL,CAEHyE,aAAczC,KAAKyC,aACnBC,iBAAkB1C,KAAK0C,iBACvBC,aAAc3C,KAAK2C,aACnBL,YAAatC,KAAKsC,YAClBM,YAAa5C,KAAK4C,mB,GA1FJnC,IAAMC,WCA1B0C,E,YAEF,WAAYjE,GAAQ,IAAD,8BACf,4CAAMA,KAEDkE,aAAe,EAAKA,aAAaxD,KAAlB,gBACpB,EAAKyD,cAAgB,EAAKA,cAAczD,KAAnB,gBAJN,E,mHAOAuC,G,8EACPQ,EAAgB5C,KAAKb,MAArByD,Y,kBAGEpE,EAAQ,gBAAiB,CAAC4D,UAAS,Q,uBACnCQ,I,uDAENW,QAAQC,KAAK,+B,6QAKTZ,EAAgB5C,KAAKb,MAArByD,Y,SACFpE,EAAQ,mB,uBACRoE,I,qIAIN,OAAO5C,KAAKb,MAAMqB,SAAX,eACAR,KAAKhC,MADL,CAEHqF,aAAcrD,KAAKqD,aACnBC,cAAetD,KAAKsD,qB,GA9BL7C,IAAMC,WAoCjC0C,EAAazC,aAAe,CACxBH,SAAW,aACXoC,YAAa,cAQFQ,Q,uCCjBArB,GA7BK,SAAC,GAAgF,IAA/EK,EAA8E,EAA9EA,OAAQJ,EAAsE,EAAtEA,KAAMC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,MAAOO,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,iBAAkBL,EAAe,EAAfA,UASjF,OAAQ,uBAAMrB,UAAWC,KAAOE,WAC5B,sBAAYC,MAAZ,CAAkBC,MAAO,GAAzB,UAEA,uBACIoC,WAAYrB,EACZsB,QAZQ,CACZ,CAAEnB,MAAO,KAAMoB,UAAW,KAAMX,IAAK,MACrC,CAAET,MAAO,QAASoB,UAAW,QAASX,IAAK,SAC3C,CAAET,MAAO,cAAeoB,UAAW,cAAeX,IAAK,eACvD,CAAET,MAAO,eAAgBoB,UAAW,eAAgBX,IAAK,iBASrDY,QAASvB,EACTwB,WAAY,CACRC,MAAO5B,EACP6B,QAAS/B,EACTgC,iBAAiB,EACjBC,gBAAiB,CAAC,KAAM,KAAM,MAC9BhC,WACAiC,SAAUzB,EACV0B,iBAAkB,SAACJ,EAASK,GAAV,OAAmB1B,EAAiB0B,S,uCCDvDC,GAtBM,SAAC,GAAD,IAAEhC,EAAF,EAAEA,UAAF,IAAaC,mBAAb,MAA2B,GAA3B,EAA+BK,EAA/B,EAA+BA,aAA/B,OACjB,uBAAM3B,UAAWC,KAAOE,WAEpB,sBAAYC,MAAZ,CAAkBC,MAAO,GAAzB,SAEA,wBACIuC,QAASvB,EACTiC,SAAUjC,EACVkC,MAAO,CAACC,MAAO,KACfC,YAAa,cACbC,YAAU,EACVR,SAAUvB,GAGTL,EAAYQ,KAAI,SAAA6B,GAAM,OACnB,uBAAQC,OAAR,CAAe5B,IAAK2B,EAAOnC,MAAOA,MAAOmC,EAAOnC,OAAQmC,EAAOpC,a,wGChBzEsC,GAAQ,uCAAG,WAAMC,GAAN,SAAAvH,EAAA,+EACL,IAAIwH,SAAQ,SAAAC,GAChBC,KAAUC,MAAMJ,EAAM,CAClBK,QAAQ,EACRC,SAAUJ,QAJL,2CAAH,sD,qBCsECK,GApEM,SAAC,GAAoC,IAAnChC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAE3BgC,EAAS,CACX9D,KAAM,OACN+D,OAAQ,OACRC,UAAU,EACVC,cAAc,WAAD,4BAAE,WAAM3G,GAAN,eAAAvB,EAAA,6DDCCmI,ECAoB5G,EAAKgG,KAAKhG,KAApC6G,EDCPD,EAAK5C,KAAI,mCAAEP,EAAF,KAAQxB,EAAR,KAAqB6E,EAArB,KAAkCC,EAAlC,WAAqD,CACjEtD,QACAxB,cACA6E,cACAC,aAAcC,GAAOD,EAAc,gBAAgBE,OAAO,2BCN3C,SAGL,IAAIhB,SAAQ,SAAAC,GACd,KAAMgB,QAAQ,CACVzD,MAAO,SACP0D,QAAQ,GAAD,OAAKN,EAAQO,OAAb,yEACPC,KAAK,WAAD,4BAAE,sBAAA5I,EAAA,sEACI8F,EAAasC,GADjB,OAEFX,IACAlG,EAAKsH,WAAU,GAHb,2CAAF,kDAAC,GAKLC,OAAQ,SACR3I,KAAM,OACN4I,SAAS,WAAD,4BAAE,sBAAA/I,EAAA,sDACNyH,IACAlG,EAAKyH,QAAQ,sBAFP,2CAAF,kDAAC,QAdN,iCDCC,IAAAb,ICDD,OAAF,mDAAC,GAuBdc,cAAe3B,IAcnB,OACI,uBAAM7D,UAAWC,KAAOE,WAEpB,yBAAKH,UAAWC,KAAOwF,QACnB,sBAAYrF,MAAZ,CAAkBC,MAAO,EAAGL,UAAWC,KAAOsB,OAA9C,eACA,uBAAQmE,MAAR,KACI,wBAAQC,KAAM,cAAeC,OAAQ,SAAUlJ,KAAM,OAAQmJ,KAAK,YAAlE,cACA,wBAAQnJ,KAAM,SAAUmJ,KAAK,QAAQC,QAlBvB,WAE1B,KAAMd,QAAQ,CACVzD,MAAO,iBACP0D,QAAS,mHACTI,OAAQ,WACRU,OAAQ,SACRZ,KAAM7C,MAWE,oBAKR,uBAAQ0D,QAAY1B,EAChB,uBAAGtE,UAAU,wBACT,wBAAMtD,KAAK,WAEf,uBAAGsD,UAAU,mBAAb,kDACA,uBAAGA,UAAU,mBAAb,yFCxCDiG,GAlBD,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACZ,OACI,kBAAC,EAAD,MACK,SAAA/H,GAAK,OAAI,kBAAC,IAAMgI,SAAP,KAELD,GACG,kBAAC,EAA0B/H,GACtB,SAAAA,GAAK,OAAI,kBAAC,GAA0BA,MAI7C,kBAAC,GAA0BA,GAC3B,kBAAC,GAAyBA,QCD3ByB,gBAJS,SAAA5C,GAAK,MAAK,CAC9BD,KAAMC,EAAMD,QAGD6C,EAbA,SAAC,GAAc,IAAZ7C,EAAW,EAAXA,KAEd,OACI,kBAAC,IAAD,CAAO6D,KAAM,WACT,kBAAC,GAAD,CAAasF,eAAgBnJ,EAAKZ,mB,QCLxCiK,GAAS,SAAC,GAAD,IAAGrJ,EAAH,EAAGA,KAAH,IAASyC,gBAAT,MAAoB,kBAAM,cAA1B,EAAoC7C,EAApC,EAAoCA,QAApC,OAAiD6C,EAAS,CACrErD,aAAcY,EAAKZ,aACnBQ,aAOJyJ,GAAOC,UAAY,CACf7G,S,QAAU8G,EAAUC,MAGT3G,oBARS,SAAA5C,GAAK,MAAK,CAC9BD,KAAMC,EAAMD,QAOwBX,EAAzBwD,CAAmCwG,I,sEC2DnCI,gBAtEA,SAAC,GAAgD,IAA/C7J,EAA8C,EAA9CA,QAASR,EAAqC,EAArCA,aAAcsK,EAAuB,EAAvBA,QAAuB,wDAE7BC,mBAAS,OAFoB,mBAEpD3D,EAFoD,KAE3C4D,EAF2C,KAI3DC,qBAAU,WAEN,IAAIC,EAEJ,IAAK,IAAD,EACeJ,EAAQK,SAAShG,SAASiG,MAAO,YAA7CF,EADH,oBAEF,MAAOG,GACLH,EAAW,SAHf,QAKIF,EAAWE,MAGhB,CAACF,EAAYF,IA+BhB,OACI,sBAAQL,OAAR,CAAepG,UAAWC,KAAOE,WAC7B,kBAAC,IAAD,CAAMU,GAAI,KACN,yBAAKoG,IAAKC,KAAgBC,IAAI,eAAenH,UAAWC,KAAOmH,QAGnE,wBACIC,MAAM,OACNC,KAAK,aACLtH,UAAWC,KAAOsH,KAClBC,aAAc,CAACzE,GACf+C,QAxCY,SAAC,GAAW,IAAV9D,EAAS,EAATA,IAEtB,OAAQA,GACJ,IAAK,SACDyE,EAAQgB,KAAK,gBACb,MACJ,IAAK,UAED,KAAMzC,QAAQ,CACVzD,MAAO,UACP0D,QAAS,6EACTI,OAAQ,UACRqC,UAAU,EACVvC,KAAMxI,IAGV,MACJ,IAAK,SACD8J,EAAQgB,KAAK,WACb,MAEJ,QACIlF,QAAQC,KAAR,wBAA8BR,IAItC2E,EAAW3E,KAgBH,uBAAMzB,KAAN,CAAWyB,IAAI,UAAf,WACE7F,GAAgB,uBAAMoE,KAAN,CAAWyB,IAAI,UAAf,UACjB7F,GAAgB,uBAAMoE,KAAN,CAAWyB,IAAI,WAAf,gB,qBCVlBpC,gBAJS,SAAA5C,GAAK,MAAK,CAC9BD,KAAMC,EAAMD,QAGD6C,EA9CG,SAAC,GAAW,EAAV7C,KAAW,IAAD,EAEF2J,oBAAS,GAFP,mBAEnBiB,EAFmB,KAEbC,EAFa,KAGpBtL,EAAWuL,cACX3L,EAAQM,aAAasL,QAAQ,SAYnC,OAVAlB,qBAAU,WACF1K,GACAI,EAAS,CACLI,KAAM,eACNQ,QAAShB,IAGjB0L,GAAQ,KACT,CAAC1L,EAAOI,IAGP,kBAAC,IAAD,KAEI,kBAAC,GAAD,MACK,SAAA6B,GAAK,OAAI,kBAAC,GAAoBA,MAGnC,2BACI,sBAAQ4J,QAAR,CAAgB/H,UAAWC,KAAO+H,eAE7BL,GAAQ,kBAAC,IAAMxB,SAAP,KAEL,kBAAC,IAAD,CAAOvF,KAAM,IAAKqH,OAAK,GACnB,kBAAC,IAAD,CAAUpH,GAAI,CAACC,SAAU,cAG7B,kBAAC,EAAD,MACA,kBAAC,GAAD,aChCToH,OARf,WACE,OACI,kBAAC,IAAD,CAAU/K,MAAOA,GACb,kBAAC,GAAD,QCIUgL,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAAStB,MACvB,2DCbNuB,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1J,MAAK,SAAA2J,GACJA,EAAaC,gBAEd1J,OAAM,SAAAb,GACLgE,QAAQhE,MAAMA,EAAMuB,c","file":"static/js/main.84ec62c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__190RK\",\"error\":\"style_error__2FU9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__1QvH7\",\"header\":\"style_header__2KMRp\",\"title\":\"style_title__6c_9B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__1AQfj\",\"logo\":\"style_logo__3hw2Z\",\"menu\":\"style_menu__1IXom\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__32343\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2e7xG\"};","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.b4d7c717.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutContent\":\"main_layoutContent__1_IWw\"};","export const types = {\r\n    SIGN_IN: 'USER/SIGN_IN',\r\n    SIGN_OUT: 'USER/SIGN_OUT',\r\n};\r\n\r\nconst initialState = {\r\n    token: null,\r\n    isAuthorized: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SIGN_IN:\r\n            return {\r\n                ...state,\r\n                token: action.payload,\r\n                isAuthorized: true,\r\n            };\r\n\r\n        case types.SIGN_OUT:\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                isAuthorized: false,\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    signIn: token => async dispatch => {\r\n        localStorage.setItem('token', token)\r\n        dispatch({\r\n            type: types.SIGN_IN,\r\n            token\r\n        });\r\n    },\r\n\r\n    signOut: () => async dispatch => {\r\n\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n            // Intentionally slow down application to see async logic\r\n            await new Promise(resolve => setTimeout(resolve, 500))\r\n        }\r\n\r\n        localStorage.removeItem('token');\r\n        dispatch({\r\n            type: types.SIGN_OUT\r\n        });\r\n    },\r\n\r\n};","import {createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport user from './user'\r\n\r\nconst reducers = combineReducers({\r\n    user,\r\n});\r\n\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    initialState,\r\n    composeWithDevTools(\r\n        applyMiddleware(thunk),\r\n    ),\r\n);\r\n\r\nexport default store\r\n","import axios from 'axios'\r\nimport store from \"../store\";\r\nconst endpoint = process.env.REACT_APP_API_ENDPOINT;\r\n\r\nconst request = (url, params = {}, method = 'get') => {\r\n\r\n    const token = store.getState().user.isAuthorized ? store.getState().user.token : null;\r\n\r\n    return axios({\r\n        url,\r\n        method,\r\n        params: method === 'get' ? params : null,\r\n        data: method === 'post' ? params: null,\r\n        baseURL: endpoint,\r\n        headers:  token ? {'Authorization': `Bearer ${token}`} : {}\r\n    })\r\n\r\n};\r\n\r\nexport {\r\n    request\r\n}","import React from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport { actions } from \"../store/user\";\r\nimport { PropTypes } from 'prop-types'\r\nimport * as Yup from 'yup'\r\nimport { request } from \"../services/api\";\r\n\r\nclass LogIn extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialValues = {\r\n            login: '',\r\n            password: '',\r\n        }\r\n\r\n        this.state = {\r\n            error: null,\r\n        }\r\n\r\n        this.validationSchema = Yup.object().shape({\r\n            login: Yup.string('Must be string')\r\n                .required('Login is required'),\r\n            password: Yup.string('Must be string')\r\n                .required('Password is required'),\r\n        })\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n\r\n    async onSubmit(fields, form) {\r\n\r\n        const { signIn } = this.props;\r\n\r\n        this.setState({\r\n            error: null\r\n        })\r\n\r\n        if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n            // Intentionally slow down application to see async logic\r\n            await new Promise(resolve => setTimeout(resolve, 500))\r\n        }\r\n\r\n        request('/auth/log-in', fields, 'post')\r\n            .then(response => signIn(response.data.token))\r\n            .catch(error => {\r\n\r\n                if (!error.response) {\r\n                    this.setState({\r\n                        error: 'Unable to connect to the server'\r\n                    })\r\n                    return;\r\n                }\r\n\r\n                const { response: { data }} = error;\r\n\r\n                for (const field in data.errors) {\r\n                    const [ error ] = data.errors[field]\r\n                    form.setFieldError(field, error)\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return this.props.children({\r\n            initialValues: this.initialValues,\r\n            validationSchema: this.validationSchema,\r\n            onSubmit: this.onSubmit,\r\n            error: this.state.error,\r\n        })\r\n    }\r\n}\r\n\r\nLogIn.defaultProps = {\r\n    children: () => {},\r\n}\r\n\r\nLogIn.propTypes = {\r\n    children: PropTypes.func,\r\n}\r\n\r\nexport default connect(null, actions)(LogIn);\r\n","import React from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport {Form, Input, SubmitButton} from 'formik-antd'\r\nimport { Card, Typography, Alert } from \"antd\";\r\nimport styles from './style.module.scss'\r\n\r\nconst CredentialsHint = ({login, password}) => (\r\n    <Alert\r\n        message=\"Looking for the credentials, huh?\"\r\n        description={<div>In order to login use <b>{login}</b> as your login and <b>{password}</b> as a password.</div>}\r\n        type=\"info\"\r\n        className={styles.error}\r\n    />\r\n);\r\n\r\nconst LogInForm = ({initialValues, validationSchema, onSubmit, error}) => {\r\n\r\n    const login = 'admin';\r\n    const password = 'password';\r\n\r\n    return (\r\n        <Card className={styles.container}>\r\n\r\n            <Typography.Title level={3}>Log In</Typography.Title>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}\r\n            >\r\n            {() =>\r\n                <Form layout={'vertical'}>\r\n                    <Form.Item name='login' label={'Login'} required>\r\n                        <Input name='login'/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name='password' label={'Password'} required>\r\n                        <Input.Password name='password' type='password'/>\r\n                    </Form.Item>\r\n\r\n                    <SubmitButton>Log In</SubmitButton>\r\n\r\n                    {!!error && <Alert  message={error} type=\"error\" showIcon className={styles.error}/> }\r\n                    <CredentialsHint login={login} password={password}/>\r\n\r\n                </Form>}\r\n            </Formik>\r\n\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default LogInForm;\r\n","import React from \"react\";\r\n\r\nimport LogInContainer from \"../../containers/LogIn\";\r\nimport LogInComponent from \"../../components/auth/LogInForm\";\r\n\r\nconst LogIn = props => {\r\n    return (\r\n        <LogInContainer>\r\n            {props => <LogInComponent {...props} />}\r\n        </LogInContainer>\r\n    )\r\n}\r\n\r\nexport default LogIn;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\nimport LogInPage from \"./LogIn\";\r\n\r\nconst Router = ({ user }) => {\r\n\r\n    return (\r\n        <Route path={\"/auth\"} >\r\n            {user.isAuthorized && <Redirect to={{pathname: \"/tweets\"}} />}\r\n            {!user.isAuthorized && <LogInPage />}\r\n        </Route>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user\r\n})\r\n\r\nexport default connect(mapStateToProps)(Router);\r\n","import React from \"react\";\r\nimport { request } from \"../services/api\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass TweetsTable extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            page: 1,\r\n            pageSize: 10,\r\n            count: null,\r\n            sort: null,\r\n            tweets: [],\r\n            isLoading: false,\r\n        }\r\n\r\n        this.sortOptions = [\r\n            {title: 'Publish date', value: 'publish_date'},\r\n            {title: 'Title', value: 'title'},\r\n        ]\r\n\r\n        this.onPageChange = this.onPageChange.bind(this);\r\n        this.onPageSizeChange = this.onPageSizeChange.bind(this);\r\n        this.onSortChange = this.onSortChange.bind(this);\r\n        this.afterUpdate = this.afterUpdate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchTweets();\r\n    }\r\n\r\n    afterUpdate(response) {\r\n        this.setState({\r\n            page: 1,\r\n        }, this.fetchTweets)\r\n    }\r\n\r\n    onPageChange(page) {\r\n        this.setState({\r\n            page,\r\n        }, this.fetchTweets)\r\n    }\r\n\r\n    onPageSizeChange(pageSize) {\r\n        this.setState({\r\n            pageSize,\r\n            page: 1,\r\n        }, this.fetchTweets)\r\n    }\r\n\r\n    mapTweetsFromApi(tweets) {\r\n        return tweets.map(tweet => ({\r\n            ...tweet,\r\n            key: tweet.id,\r\n        }));\r\n    }\r\n\r\n    onSortChange(sort) {\r\n        this.setState({\r\n            page: 1,\r\n            sort,\r\n        }, this.fetchTweets)\r\n    }\r\n\r\n    async fetchTweets() {\r\n        const {page, pageSize, sort} = this.state;\r\n\r\n        this.setState({\r\n            isLoading: true,\r\n        }, async () => {\r\n\r\n            const response = await request('tweets/index', {\r\n                page, pageSize, sort\r\n            }, 'get')\r\n\r\n            const {tweets, count} = response.data;\r\n\r\n            this.setState({\r\n                tweets: this.mapTweetsFromApi(tweets),\r\n                count: parseInt(count),\r\n                isLoading: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return this.props.children({\r\n            ...this.state,\r\n            onPageChange: this.onPageChange,\r\n            onPageSizeChange: this.onPageSizeChange,\r\n            onSortChange: this.onSortChange,\r\n            sortOptions: this.sortOptions,\r\n            afterUpdate: this.afterUpdate,\r\n        })\r\n    }\r\n}\r\n\r\nTweetsTable.propTypes = {\r\n    children: PropTypes.func\r\n}\r\n\r\nexport default TweetsTable;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { request } from \"../services/api\";\r\n\r\nclass UploadTweets extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.uploadTweets = this.uploadTweets.bind(this)\r\n        this.truncateTable = this.truncateTable.bind(this)\r\n    }\r\n\r\n    async uploadTweets(tweets) {\r\n        const { afterUpdate } = this.props\r\n\r\n        try {\r\n            await request('tweets/upload', {tweets}, 'post')\r\n            await afterUpdate()\r\n        } catch(e) {\r\n            console.warn('Error with uploading tweets')\r\n        }\r\n    }\r\n\r\n    async truncateTable() {\r\n        const { afterUpdate } = this.props\r\n        await request('tweets/truncate')\r\n        await afterUpdate()\r\n    }\r\n\r\n    render() {\r\n        return this.props.children({\r\n            ...this.state,\r\n            uploadTweets: this.uploadTweets,\r\n            truncateTable: this.truncateTable,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nUploadTweets.defaultProps = {\r\n    children:  () => {},\r\n    afterUpdate: () => {},\r\n}\r\n\r\nUploadTweets.propTypes = {\r\n    children: PropTypes.func,\r\n    afterUpdate: PropTypes.func,\r\n}\r\n\r\nexport default UploadTweets;","import React from \"react\";\r\nimport styles from './style.module.scss'\r\nimport { Card, Table, Typography } from \"antd\";\r\n\r\nconst TweetsTable = ({tweets, page, pageSize, count, onPageChange, onPageSizeChange, isLoading}) => {\r\n\r\n    const columns = [\r\n        { title: 'ID', dataIndex: 'id', key: 'id' },\r\n        { title: 'Title', dataIndex: 'title', key: 'title' },\r\n        { title: 'Description', dataIndex: 'description', key: 'description' },\r\n        { title: 'Publish Date', dataIndex: 'publish_date', key: 'publish_date' },\r\n    ];\r\n\r\n    return (<Card className={styles.container}>\r\n        <Typography.Title level={4}>Tweets</Typography.Title>\r\n\r\n        <Table\r\n            dataSource={tweets}\r\n            columns={columns}\r\n            loading={isLoading}\r\n            pagination={{\r\n                total: count,\r\n                current: page,\r\n                showSizeChanger: true,\r\n                pageSizeOptions: ['10', '20', '50'],\r\n                pageSize,\r\n                onChange: onPageChange,\r\n                onShowSizeChange: (current, size) => onPageSizeChange(size)\r\n            }}\r\n        />\r\n    </Card>);\r\n\r\n}\r\nexport default TweetsTable;","import React from \"react\";\r\nimport { Card, Select, Typography } from 'antd'\r\nimport styles from './style.module.scss'\r\n\r\nconst TweetsSorter = ({isLoading, sortOptions = [], onSortChange}) => (\r\n    <Card className={styles.container}>\r\n\r\n        <Typography.Title level={4}>Order</Typography.Title>\r\n\r\n        <Select\r\n            loading={isLoading}\r\n            disabled={isLoading}\r\n            style={{width: 150}}\r\n            placeholder={'Order by...'}\r\n            allowClear\r\n            onChange={onSortChange}\r\n        >\r\n\r\n            {sortOptions.map(option =>\r\n                <Select.Option key={option.value} value={option.value}>{option.title}</Select.Option>)\r\n            }\r\n\r\n        </Select>\r\n    </Card>\r\n);\r\n\r\nexport default TweetsSorter;\r\n","import Papaparse from 'papaparse'\r\nimport * as moment from \"moment\";\r\n\r\nconst parseCsv = async file => {\r\n     return new Promise(resolve => {\r\n        Papaparse.parse(file, {\r\n            worker: true,\r\n            complete: resolve,\r\n        })\r\n    })\r\n}\r\n\r\nconst mapRowsToFields = rows => {\r\n    return rows.map(([title,description, author_name, publish_date]) => ({\r\n        title,\r\n        description,\r\n        author_name,\r\n        publish_date: moment(publish_date, 'DD.MM.Y H:mm').format('YYYY-MM-DD HH:mm:00')\r\n    }))\r\n}\r\n\r\nexport {\r\n    parseCsv, mapRowsToFields\r\n}","import React from \"react\";\r\nimport {Upload, Icon, Modal, Card, Typography, Button } from \"antd\";\r\nimport { parseCsv, mapRowsToFields } from \"../../services/parse-cvs\";\r\nimport styles from './style.module.scss'\r\n\r\nconst TweetsUpload = ({uploadTweets, truncateTable }) => {\r\n\r\n    const config = {\r\n        name: 'file',\r\n        accept: '.csv',\r\n        multiply: false,\r\n        customRequest: async data => {\r\n            const records = mapRowsToFields(data.file.data)\r\n\r\n            await new Promise(resolve => {\r\n                Modal.confirm({\r\n                    title: 'Upload',\r\n                    content: `${records.length} records were successfully parsed, upload them at the speed of light?`,\r\n                    onOk: async () => {\r\n                        await uploadTweets(records)\r\n                        resolve();\r\n                        data.onSuccess(true)\r\n                    },\r\n                    okText: 'Upload',\r\n                    type: 'info',\r\n                    onCancel: async () => {\r\n                        resolve();\r\n                        data.onError('You canceled that!')\r\n                    }\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        transformFile: parseCsv,\r\n    }\r\n\r\n    const onTruncateButtonPress = () => {\r\n\r\n        Modal.confirm({\r\n            title: 'Truncate table',\r\n            content: 'Are you sure? Somebody (maybe even you) spent a lot of time to fill it up, there could be something important...',\r\n            okText: 'Truncate',\r\n            okType: 'danger',\r\n            onOk: truncateTable,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className={styles.container}>\r\n\r\n            <div className={styles.header}>\r\n                <Typography.Title level={4} className={styles.title}>Admin Panel</Typography.Title>\r\n                <Button.Group>\r\n                    <Button href={'/sample.csv'} target={'_blank'} type={'info'} icon=\"download\">Get sample</Button>\r\n                    <Button type={'danger'} icon=\"frown\" onClick={onTruncateButtonPress}>Truncate table</Button>\r\n                </Button.Group>\r\n\r\n            </div>\r\n\r\n            <Upload.Dragger {...config}>\r\n                <p className=\"ant-upload-drag-icon\">\r\n                    <Icon type=\"inbox\"/>\r\n                </p>\r\n                <p className=\"ant-upload-text\">Click or drag .csv file to this area to upload</p>\r\n                <p className=\"ant-upload-hint\">\r\n                    Since you are an authorized user, you can upload table and we will gently parse it\r\n                </p>\r\n            </Upload.Dragger>\r\n\r\n        </Card>\r\n    )\r\n}\r\nexport default TweetsUpload;\r\n\r\n","import React from \"react\";\r\nimport TweetsTableContainer from \"../../containers/TweetsTable\";\r\nimport UploadTweetsContainer from \"../../containers/UploadTweets\";\r\nimport TweetsTableComponent from \"../../components/tweets-table/tweets-table\";\r\nimport TweetsSorterComponent from \"../../components/tweets-sorter/tweets-sorter\";\r\nimport TweetsUploadComponent from \"../../components/tweets-upload/tweets-upload\";\r\n\r\nconst Table = ({showAdminPanel}) => {\r\n    return (\r\n        <TweetsTableContainer>\r\n            {props => <React.Fragment>\r\n\r\n                {showAdminPanel &&\r\n                    <UploadTweetsContainer {...props}>\r\n                        {props => <TweetsUploadComponent {...props} />}\r\n                    </UploadTweetsContainer>\r\n                }\r\n\r\n                <TweetsSorterComponent {...props} />\r\n                <TweetsTableComponent {...props} />\r\n            </React.Fragment>}\r\n        </TweetsTableContainer>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\nimport TweetsTable from \"./Table\";\r\n\r\nconst Router = ({ user }) => {\r\n\r\n    return (\r\n        <Route path={\"/tweets\"} >\r\n            <TweetsTable showAdminPanel={user.isAuthorized} />\r\n        </Route>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user\r\n})\r\n\r\nexport default connect(mapStateToProps)(Router);\r\n","import { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\nimport { actions } from \"../store/user\";\r\n\r\nconst Header = ({ user, children = () => () => {}, signOut}) => children({\r\n    isAuthorized: user.isAuthorized,\r\n    signOut,\r\n})\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user\r\n})\r\n\r\nHeader.propTypes = {\r\n    children: PropTypes.func\r\n}\r\n\r\nexport default connect(mapStateToProps, actions) (Header);","import React, { useEffect, useState } from \"react\";\r\nimport styles from './style.module.scss'\r\nimport { Layout, Menu, Modal } from 'antd'\r\nimport TwitterLogoUrl from './twitter-logo.svg'\r\nimport { withRouter, Link } from 'react-router-dom'\r\n\r\nconst Header = ({signOut, isAuthorized, history, ...props}) => {\r\n\r\n    const [current, setCurrent] = useState(null)\r\n\r\n    useEffect(() => {\r\n\r\n        let pageName;\r\n\r\n        try {\r\n            [, pageName] = history.location.pathname.match( /([^/]+)$/ );\r\n        } catch (e) {\r\n            pageName = 'tweets'\r\n        } finally {\r\n            setCurrent(pageName);\r\n        }\r\n\r\n    }, [setCurrent, history])\r\n\r\n    const onMenuItemClick = ({key}) => {\r\n\r\n        switch (key) {\r\n            case 'log-in':\r\n                history.push('/auth/log-in')\r\n                break;\r\n            case 'log-out':\r\n\r\n                Modal.confirm({\r\n                    title: 'Log out',\r\n                    content: 'Are you sure you want to log out? You will be unable to upload new tweets.',\r\n                    okText: 'Log out',\r\n                    centered: true,\r\n                    onOk: signOut\r\n                })\r\n\r\n                break;\r\n            case 'tweets':\r\n                history.push('/tweets')\r\n                break;\r\n\r\n            default:\r\n                console.warn(`Unknown page: ${key}`)\r\n                break;\r\n        }\r\n\r\n        setCurrent(key)\r\n    }\r\n\r\n    return (\r\n        <Layout.Header className={styles.container}>\r\n            <Link to={\"/\"}>\r\n                <img src={TwitterLogoUrl} alt=\"twitter-logo\" className={styles.logo}/>\r\n            </Link>\r\n\r\n            <Menu\r\n                theme=\"dark\"\r\n                mode=\"horizontal\"\r\n                className={styles.menu}\r\n                selectedKeys={[current]}\r\n                onClick={onMenuItemClick}\r\n            >\r\n                <Menu.Item key=\"tweets\">Tweets</Menu.Item>\r\n                {!isAuthorized && <Menu.Item key=\"log-in\">Log In</Menu.Item>}\r\n                {isAuthorized && <Menu.Item key=\"log-out\">Log Out</Menu.Item>}\r\n\r\n            </Menu>\r\n        </Layout.Header>\r\n    );\r\n\r\n}\r\n\r\nexport default withRouter(Header);","import React, {useEffect, useState} from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\r\nimport { Layout } from 'antd';\r\nimport AuthRouter from \"./auth/Router\";\r\nimport TweetsRouter from \"./tweets/Router\";\r\nimport HeaderContainer from \"../containers/Header\";\r\nimport HeaderComponent from \"../components/header/header\";\r\nimport styles from './main.module.scss'\r\n\r\n\r\nconst AppRouter = ({user}) => {\r\n\r\n    const [init, setInit] = useState(false)\r\n    const dispatch = useDispatch();\r\n    const token = localStorage.getItem('token')\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            dispatch({\r\n                type: 'USER/SIGN_IN',\r\n                payload: token\r\n            })\r\n        }\r\n        setInit(true)\r\n    }, [token, dispatch])\r\n\r\n    return (\r\n        <Router>\r\n\r\n            <HeaderContainer>\r\n                {props => <HeaderComponent {...props}/>}\r\n            </HeaderContainer>\r\n\r\n            <Layout>\r\n                <Layout.Content className={styles.layoutContent}>\r\n\r\n                    {init && <React.Fragment>\r\n\r\n                        <Route path={'/'} exact>\r\n                            <Redirect to={{pathname: \"/tweets\"}}/>\r\n                        </Route>\r\n\r\n                        <AuthRouter/>\r\n                        <TweetsRouter/>\r\n                    </React.Fragment>}\r\n\r\n                </Layout.Content>\r\n            </Layout>\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user,\r\n})\r\n\r\nexport default connect(mapStateToProps)(AppRouter);\r\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport store from \"./store\";\nimport AppRouter from \"./pages/Router\";\n\nfunction App() {\n  return (\n      <Provider store={store}>\n          <AppRouter />\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}